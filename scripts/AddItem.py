# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddItem.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import time
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication
import sys
import ctypes
import time
from datetime import datetime

sys.path.append("./")
from Methods.GetPrices import GetPrices
from Methods.Database import Database

class Ui_AddItem(object):
        #UI setup
        def setupUi(self, AddItem):
                AddItem.setObjectName("AddItem")
                AddItem.resize(890, 580)

                self.centralwidget = QtWidgets.QWidget(AddItem)
                self.centralwidget.setObjectName("centralwidget")

                self.LabelShop = QtWidgets.QLineEdit(self.centralwidget)
                self.LabelShop.setGeometry(QtCore.QRect(220, 130, 71, 51))
                self.LabelShop.setReadOnly(True)
                self.LabelShop.setObjectName("LabelShop")

                self.LabelUrl = QtWidgets.QLineEdit(self.centralwidget)
                self.LabelUrl.setGeometry(QtCore.QRect(220, 190, 71, 51))
                self.LabelUrl.setReadOnly(True)
                self.LabelUrl.setObjectName("LabelUrl")

                self.LabelItem = QtWidgets.QLineEdit(self.centralwidget)
                self.LabelItem.setGeometry(QtCore.QRect(220, 250, 71, 51))
                self.LabelItem.setReadOnly(True)
                self.LabelItem.setObjectName("LabelItem")

                self.ShopDropMenu = QtWidgets.QComboBox(self.centralwidget)
                self.ShopDropMenu.setGeometry(QtCore.QRect(290, 130, 391, 51))
                self.ShopDropMenu.setObjectName("ShopDropMenu")

                self.InputUrl = QtWidgets.QTextEdit(self.centralwidget)
                self.InputUrl.setGeometry(QtCore.QRect(290, 190, 391, 51))
                self.InputUrl.setObjectName("InputUrl")

                self.InputItemName = QtWidgets.QTextEdit(self.centralwidget)
                self.InputItemName.setGeometry(QtCore.QRect(290, 250, 391, 51))
                self.InputItemName.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
                self.InputItemName.setObjectName("InputItemName")

                self.btnAddItem = QtWidgets.QPushButton(self.centralwidget)
                self.btnAddItem.setGeometry(QtCore.QRect(370, 310, 311, 81))
                self.btnAddItem.setStyleSheet("background-color: rgb(170, 255, 255);")
                self.btnAddItem.setObjectName("btnAddItem")

                self.btnBack = QtWidgets.QPushButton(self.centralwidget)
                self.btnBack.setGeometry(QtCore.QRect(220, 310, 141, 81))
                self.btnBack.setStyleSheet("background-color: rgb(170, 255, 255);")
                self.btnBack.setObjectName("btnBack")

                AddItem.setCentralWidget(self.centralwidget)
                self.retranslateUi(AddItem)
                QtCore.QMetaObject.connectSlotsByName(AddItem)

                self.btnAddItem.clicked.connect(self.AddItemClick)
                self.btnBack.clicked.connect(AddItem.close)
        
                # Set shops to shopDropMenu
                self.setShops()

        #Finding the shops from the database
        def setShops(self):
                object = Database
                shopList = object.findShops()
                self.ShopDropMenu.clear()
                self.ShopDropMenu.setPlaceholderText(" ")
                self.ShopDropMenu.setCurrentIndex(-1)
                
                for row in shopList:
                        self.ShopDropMenu.addItem(row[0])

        #Method for the message boxes
        def Mbox(self, title, text, style):
                return ctypes.windll.user32.MessageBoxW(0, text, title, style)

        #Clears the inputs and shows a message that the item has been added
        def clearInputs(self):
                self.InputUrl.clear()
                self.InputItemName.clear()
                self.ShopDropMenu.setCurrentIndex(-1)
                self.Mbox("!", "Item added.", 0)
                


        #Method for adding the item 
        def AddItemClick(self):

                QApplication.processEvents()

                itemName = self.InputItemName.toPlainText()
                URL = self.InputUrl.toPlainText()
                shop = self.ShopDropMenu.currentText()
                date = datetime.today().strftime('%Y-%m-%d')

                #Shows an error if the item's name has been left empty
                if itemName == '':
                        self.Mbox("Warning", "Item name not set!", 0)
                
                #Shows an error if the item's name only has spaces or invisible symbols
                elif itemName.isspace() == True:
                        self.Mbox("Warning", "Item name not set!", 0)
                
                #Checks what shop has been selected and if it matches with the shops URL
                elif shop == "Jimms":
                        
                        #Shows an error if the URL is wrong
                        if not (URL.startswith("https://www.jimms.fi/")):
                                self.Mbox("Warning","INVALID URL!", 0)
                        
                        #Tries adding the item to the database
                        else:
                                itemCheck = Database.checkItemNames(itemName)
                                
                                #Shows an error if an item with the same name exists
                                if ('TRUE',) in itemCheck:
                                        self.Mbox("Warning","Item exists in database",0)

                                #If the item is not found in the database before, it gets added
                                else:
                                        time.sleep(0.5)
                                        priceJimms = GetPrices.getJimmsPrice(URL)
                                        priceJimms = ''.join(priceJimms.split())
                                        Database.addItem(Database, itemName, URL, shop)
                                        Database.addItemPrice(Database, priceJimms, date, itemName, shop)
                                        self.clearInputs()

                
                elif shop == "Verkkokauppa.com":

                        if not (URL.startswith("https://www.verkkokauppa.com/")):
                                self.Mbox("Warning", "INVALID URL!",0)
                        else:
                                itemCheck = Database.checkItemNames(itemName)
                                if ('TRUE',) in itemCheck:
                                        self.Mbox("Warning","Item exists in database",0)
                                else:
                                        time.sleep(0.5)
                                        priceVerkkokauppacom = GetPrices.getVerkkokauppaComPrice(URL)
                                        priceVerkkokauppacom = ''.join(priceVerkkokauppacom.split())
                                        Database.addItem(Database, itemName, URL, shop)
                                        Database.addItemPrice(Database, priceVerkkokauppacom, date, itemName, shop)
                                        self.clearInputs()

                elif shop == "Prisma":

                        if not (URL.startswith("https://www.prisma.fi/")):
                                self.Mbox("Warning", "INVALID URL!",0)
                        else:
                                itemCheck = Database.checkItemNames(itemName)
                                if ('TRUE',) in itemCheck:
                                        self.Mbox("Warning","Item exists in database",0)
                                else:
                                        time.sleep(0.5)
                                        pricePrisma = GetPrices.getPrismaPrice(URL)
                                        pricePrisma = ''.join(pricePrisma.split())
                                        Database.addItem(Database, itemName, URL, shop)
                                        Database.addItemPrice(Database, pricePrisma, date, itemName, shop)
                                        self.clearInputs()

                elif shop == "Karkkainen":

                        if not (URL.startswith("https://www.karkkainen.com/")):
                                self.Mbox("Warning", "INVALID URL!",0)
                        else:
                                itemCheck = Database.checkItemNames(itemName)
                                if ('TRUE',) in itemCheck:
                                        self.Mbox("Warning","Item exists in database",0)
                                else:
                                        time.sleep(0.5)
                                        priceKarkkainen = GetPrices.getKarkkainenPrice(URL)
                                        priceKarkkainen = ''.join(priceKarkkainen.split())
                                        Database.addItem(Database, itemName, URL, shop)
                                        Database.addItemPrice(Database, priceKarkkainen, date, itemName, shop)
                                        self.clearInputs()




                

        def retranslateUi(self, AddItem):
                _translate = QtCore.QCoreApplication.translate
                AddItem.setWindowTitle(_translate("AddItem", "MainWindow"))
                self.btnAddItem.setText(_translate("AddItem", "Add item"))
                self.InputUrl.setHtml(_translate("AddItem", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                        "p, li { white-space: pre-wrap; }\n"
                        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                        "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>"))
                self.LabelUrl.setText(_translate("AddItem", "Url:"))
                self.LabelItem.setText(_translate("AddItem", "Item name:"))
                self.InputItemName.setMarkdown(_translate("AddItem", "\n"
                                                        "\n"
                                                        "\n"
                                                        ""))
                self.InputItemName.setHtml(_translate("AddItem", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                        "p, li { white-space: pre-wrap; }\n"
                        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                        "<p align=\"center\" style=\" margin-top:5px; margin-bottom:5px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>"))
                self.LabelShop.setText(_translate("AddItem", "Select shop:"))
                self.btnBack.setText(_translate("AddItem", "Back"))

        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AddItem = QtWidgets.QMainWindow()
    ui = Ui_AddItem()
    ui.setupUi(AddItem)
    AddItem.show()
    sys.exit(app.exec_())
        